name: Ban Artifacts Check

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  check-artifacts:
    name: Check for banned artifacts
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Full history for diff
      
      - name: Check for banned directories
        run: |
          echo "Checking for banned artifact directories..."
          
          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          
          # Define banned patterns
          BANNED_PATTERNS=(
            "runs/**"
            "data/**"
            ".hf/**"
            ".mirrors/**"
            "scratch/**"
          )
          
          # Check each changed file
          FOUND_BANNED=false
          for file in $CHANGED_FILES; do
            for pattern in "${BANNED_PATTERNS[@]}"; do
              # Convert glob pattern to regex for matching
              regex=$(echo "$pattern" | sed 's/\*\*/.*/')
              regex=$(echo "$regex" | sed 's/\*/[^\/]*/')
              
              if echo "$file" | grep -E "^$regex" > /dev/null; then
                echo "❌ Found banned artifact: $file (matches $pattern)"
                FOUND_BANNED=true
              fi
            done
          done
          
          if [ "$FOUND_BANNED" = true ]; then
            echo ""
            echo "ERROR: This PR contains banned artifact files."
            echo "Please remove all files from: runs/**, data/**, .hf/**, .mirrors/**, scratch/**"
            echo "These directories should be in .gitignore"
            exit 1
          fi
          
          echo "✅ No banned artifacts found"
      
      - name: Fail on toy/smoke/synthetic in source
        run: |
          echo "Scanning for toy/smoke/synthetic in production source..."
          
          # Check production source directories (exclude tests)
          HITS=$(grep -RIn -E 'toy|smoke|synthetic' agents eval mcp transport 2>/dev/null || true)
          
          if [ -n "$HITS" ]; then
            echo "❌ ERROR: Found banned keywords in production source:"
            echo "$HITS"
            echo ""
            echo "These keywords are not allowed in production code."
            echo "Remove or relocate to tests/ directory."
            exit 1
          fi
          
          echo "✅ No toy/smoke/synthetic found in production source"
      
      - name: Verify .gitignore includes artifacts
        run: |
          echo "Checking .gitignore configuration..."
          
          # Check that .gitignore exists
          if [ ! -f .gitignore ]; then
            echo "❌ Missing .gitignore file"
            exit 1
          fi
          
          # Check for required ignore patterns
          REQUIRED_IGNORES=(
            "runs/"
            "data/"
            ".hf/"
            ".mirrors/"
            "scratch/"
          )
          
          MISSING_IGNORES=""
          for pattern in "${REQUIRED_IGNORES[@]}"; do
            if ! grep -q "^$pattern" .gitignore; then
              MISSING_IGNORES="$MISSING_IGNORES $pattern"
            fi
          done
          
          if [ -n "$MISSING_IGNORES" ]; then
            echo "⚠️  Missing from .gitignore:$MISSING_IGNORES"
            echo "Consider adding these patterns to .gitignore"
          else
            echo "✅ All artifact directories are in .gitignore"
          fi